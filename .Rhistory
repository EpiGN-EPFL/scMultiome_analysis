dups <- unique(all_genes[duplicated(all_genes)])
npc_markers <- lapply(npc_list$marker_genes, function(genes) {
setdiff(genes, dups)
})
DotPlot(seurat, npc_markers, group.by = 'wsnn_res.0.5') + RotatedAxis()
npc_markers
View(top_markers_rna)
seurat <- RenameIdents(seurat,
'16'='vascular_endothelial_cell',
'12'='mesenchymal_cell',
'9'='neural_crest',
'15'='neurons',
c('4','11','14','17')='choroid_plexus_epithelium')
Idents(seurat)
?RenameIdents
top_markers_rna <- DE_wnn %>%
filter(abs(logFC) > log(1.2) &
padj < 0.01 &
auc > 0.65 &
pct_in - pct_out > 30 &
pct_out < 20) %>%
group_by(group) #%>%
top_markers_rna <- DE_wnn %>%
filter(abs(logFC) > log(1.2) &
padj < 0.01 &
auc > 0.65 &
pct_in - pct_out > 30 &
pct_out < 20) %>%
group_by(group) %>%
top_n(20, wt = auc)
top_markers_rna
library(clusterProfiler)
BiocManager::install("clusterProfiler")
library(EnsDb.Hsapiens.v86) # Annotation database
library(biovizBase)
library(Seurat)
library(Signac)
library(Matrix)
library(dplyr)
library(tidyr)
library(ggplot2)
library(presto)
library(pheatmap)
library(yaml)
library(tibble)
library(clustree)
library(clusterProfiler)
cluster_ids <- unique(top_markers_rna$group)
cluster_ids <- unique(top_markers_rna$group)
go_list <- lapply(cluster_ids, function(clust) {
genes <- top_markers_rna %>% filter(group == clust) %>% pull(gene)
entrez <- bitr(genes, fromType="SYMBOL", toType="ENTREZID", OrgDb=org.Hs.eg.db)
enrichGO(gene = entrez$ENTREZID,
OrgDb = org.Hs.eg.db,
ont = "BP",
pAdjustMethod = "BH",
pvalueCutoff = 0.05,
readable = TRUE)
})
cluster_ids <- unique(top_markers_rna$group)
go_list <- lapply(cluster_ids, function(clust) {
genes <- top_markers_rna %>% filter(group == clust) %>% pull(feature)
entrez <- bitr(genes, fromType="SYMBOL", toType="ENTREZID", OrgDb=org.Hs.eg.db)
enrichGO(gene = entrez$ENTREZID,
OrgDb = org.Hs.eg.db,
ont = "BP",
pAdjustMethod = "BH",
pvalueCutoff = 0.05,
readable = TRUE)
})
library(EnsDb.Hsapiens.v86) # Annotation database
library(biovizBase)
library(Seurat)
library(Signac)
library(Matrix)
library(dplyr)
library(tidyr)
library(ggplot2)
library(presto)
library(pheatmap)
library(yaml)
library(tibble)
library(clustree)
library(clusterProfiler)
library(org.Hs.eg.db)
cluster_ids <- unique(top_markers_rna$group)
go_list <- lapply(cluster_ids, function(clust) {
genes <- top_markers_rna %>% filter(group == clust) %>% pull(feature)
entrez <- bitr(genes, fromType="SYMBOL", toType="ENTREZID", OrgDb=org.Hs.eg.db)
enrichGO(gene = entrez$ENTREZID,
OrgDb = org.Hs.eg.db,
ont = "BP",
pAdjustMethod = "BH",
pvalueCutoff = 0.05,
readable = TRUE)
})
names(go_list) <- cluster_ids
View(go_list)
go$1
go_list$`0`
go_list$`0`$result
go_list$`0`@readable
go_list$`0`@result
go_list$`0` %>% as.data.frame()
test <- rbind(as.data.frame(go_list))
test <- rbindlist((go_list))
cluster_ids <- unique(top_markers_rna$group)
go_list <- lapply(cluster_ids, function(clust) {
genes <- top_markers_rna %>% filter(group == clust) %>% pull(feature)
entrez <- bitr(genes, fromType="SYMBOL", toType="ENTREZID", OrgDb=org.Hs.eg.db)
enrichGO(gene = entrez$ENTREZID,
OrgDb = org.Hs.eg.db,
ont = "BP",
pAdjustMethod = "BH",
pvalueCutoff = 0.01,
readable = TRUE) %>% as.data.frame()
})
names(go_list) <- cluster_ids
test <- rbindlist(go_list)
View(test)
?rbindlist
test <- rbindlist(go_list, use.names = T)
View(test)
test <- rbindlist(go_list, idcol = 'cluster')
test$cluster %>% unique()
View(test)
top_markers_rna <- DE_wnn %>%
filter(abs(logFC) > log(1.2) &
padj < 0.01 &
auc > 0.65 &
pct_in - pct_out > 30 &
pct_out < 20) %>%
group_by(group) %>%
top_n(10, wt = auc)
top_markers_rna
Idents(seurat)
seurat <- RenameIdents(seurat,
'1'='early.stage.1',
'2'='early.stage.2')
seurat <- RenameIdents(seurat,
'1'='early.stage.1',
'2'='early.stage.2',
'6'='early.stage.3')
seurat <- RenameIdents(seurat,
'1'='early.stage.1',
'2'='early.stage.2',
'6'='early.stage.3',
'7'='early.stage.4')
npc_markers
seurat <- RenameIdents(seurat,
'1'='early.stage.1',
'2'='early.stage.2',
'6'='early.stage.3',
'7'='early.stage.4',
'10'='early.stage.5')
seurat <- RenameIdents(seurat,
'0'='telencephalon.progenitor.1',
'3'='diencephalon.progenitor.2',
'4'='choroid_plexus_epithelium.progenitor.1',
'5'='telencephalon.progenitor.2',
'8'='diencephalon.progenitor.3',
'11'='choroid_plexus_epithelium.progenitor.2',
'13'='diencephalon.progenitor.3',
'15'='neurons',
'14'='choroid_plexus_epithelium.progenitor.3')
Idents(seurat)
Idents(seurat) %>% unique()
seurat$celltype <- Idents(seurat)
seurat$celltype %>% separate('.') -> test
knitr::opts_chunk$set(warning = FALSE, message = FALSE, results = "hide")
library(EnsDb.Hsapiens.v86) # Annotation database
library(biovizBase)
library(Seurat)
library(Signac)
library(Matrix)
library(dplyr)
library(tidyr)
library(ggplot2)
library(presto)
library(pheatmap)
library(yaml)
library(tibble)
library(clustree)
library(clusterProfiler)
library(org.Hs.eg.db)
seurat <- readRDS('out/bimodal_seurat.Rds')
DefaultAssay(seurat) <- "RNA"
DE_wnn <- wilcoxauc(seurat, "wsnn_res.0.5", seurat_assay = "RNA")
top_markers_wnn <- DE_wnn %>%
filter(abs(logFC) > log(1.2) &
padj < 0.01 &
auc > 0.65 &
pct_in - pct_out > 30 &
pct_out < 20) %>%
group_by(group) %>%
top_n(10, wt = auc)
top_markers_wnn
meta <- seurat@meta.data %>%
mutate(stage = case_when(
wsnn_res.0.5 %in% c(1, 2, 6, 7, 10) ~ "early_stage",
TRUE ~ as.character(wsnn_res.0.5)
))
yaml_data <- read_yaml('data/marker_genes.yaml')
# Flatten the YAML structure
marker_df <- yaml_data %>%
unlist() %>%
as.data.frame(stringsAsFactors = FALSE) %>%
rename(., gene = 1) %>%
distinct() %>%
rownames_to_column("path") %>%
separate(path, into = paste0("level", 1:5), sep = "\\.subtypes\\.|\\.marker_genes[0-9]*",
fill = "right") %>%
mutate(across(everything(), ~ na_if(.x, ""))) %>%
column_to_rownames("gene")
gc()
marker_df
# Flatten the YAML structure
marker_df <- yaml_data %>%
unlist() %>%
as.data.frame(stringsAsFactors = FALSE) %>%
rename(., gene = 1) %>%
distinct() %>%
rownames_to_column("path") %>%
separate(path, into = paste0("level", 1:5), sep = "\\.subtypes\\.|\\.marker_genes[0-9]*",
fill = "right") %>%
mutate(across(everything(), ~ na_if(.x, ""))) %>%
column_to_rownames("gene")
# Flatten the YAML structure
marker_df <- yaml_data %>%
unlist() %>%
as.data.frame(stringsAsFactors = FALSE) #%>%
# Flatten the YAML structure
marker_df <- yaml_data %>%
unlist() %>%
as.data.frame(stringsAsFactors = FALSE) %>%
rename(., gene = 1) %>%
distinct() %>%
rownames_to_column("path") #%>%
# Flatten the YAML structure
marker_df <- yaml_data %>%
unlist() %>%
as.data.frame(stringsAsFactors = FALSE) %>%
rename(., gene = 1) %>%
distinct() %>%
rownames_to_column("path") %>%
separate(path, into = paste0("level", 1:5), sep = "\\.subtypes\\.|\\.marker_genes[0-9]*",
fill = "right") #%>%
View(marker_df)
?separate
# Flatten the YAML structure
marker_df <- yaml_data %>%
unlist() %>%
as.data.frame(stringsAsFactors = FALSE) %>%
rename(., gene = 1) %>%
distinct() %>%
rownames_to_column("path") %>%
separate(path, into = paste0("level", 1:5), sep = "\\.subtypes\\.|\\.marker_genes[0-9]*",
fill = "right") #%>%
knitr::opts_chunk$set(warning = FALSE, message = FALSE, results = "hide")
library(EnsDb.Hsapiens.v86) # Annotation database
library(biovizBase)
library(Seurat)
library(Signac)
library(Matrix)
library(dplyr)
library(tidyr)
library(ggplot2)
library(presto)
library(pheatmap)
library(yaml)
library(tibble)
library(clustree)
library(clusterProfiler)
library(org.Hs.eg.db)
seurat <- readRDS('out/bimodal_seurat.Rds')
DefaultAssay(seurat) <- "RNA"
DE_wnn <- wilcoxauc(seurat, "wsnn_res.0.5", seurat_assay = "RNA")
top_markers_wnn <- DE_wnn %>%
filter(abs(logFC) > log(1.2) &
padj < 0.01 &
auc > 0.65 &
pct_in - pct_out > 30 &
pct_out < 20) %>%
group_by(group) %>%
top_n(10, wt = auc)
top_markers_wnn
View(seurat)
meta <- seurat@meta.data %>%
mutate(stage = case_when(
wsnn_res.0.5 %in% c(1, 2, 6, 7, 10) ~ "early_stage",
TRUE ~ as.character(wsnn_res.0.5)
))
yaml_data <- read_yaml('data/marker_genes.yaml')
# Flatten the YAML structure
marker_df <- yaml_data %>%
unlist() %>%
as.data.frame(stringsAsFactors = FALSE) %>%
rename(., gene = 1) %>%
distinct() %>%
rownames_to_column("path") %>%
separate(path, into = paste0("level", 1:5), sep = "\\.subtypes\\.|\\.marker_genes[0-9]*",
fill = "right") %>%
mutate(across(everything(), ~ na_if(.x, ""))) %>%
column_to_rownames("gene")
# Flatten the YAML structure
marker_df <- yaml_data %>%
unlist() %>%
as.data.frame(stringsAsFactors = FALSE) %>%
rename(., gene = 1) %>%
distinct() %>%
rownames_to_column("path") %>%
separate(path, into = paste0("level", 1:5), sep = "\\.subtypes\\.|\\.marker_genes[0-9]*",
fill = "right") #%>%
# Flatten the YAML structure
marker_df <- yaml_data %>%
unlist() %>%
as.data.frame(stringsAsFactors = FALSE) %>%
rename(., gene = 1) %>%
distinct() %>%
rownames_to_column("path") #%>%
View(marker_df)
# Flatten the YAML structure
marker_df <- yaml_data %>%
unlist() %>%
as.data.frame(stringsAsFactors = FALSE) %>%
rename(., gene = 1) %>%
distinct() %>%
rownames_to_column("path") %>%
separate(path, into = paste0("level", 1:5), sep = "\\.subtypes\\.|\\.marker_genes[0-9]*",
fill = "right") #%>%
# Step 1: Unlist and convert to data frame
marker_df <- data.frame(
path = names(unlist(yaml_data)),
gene = unname(unlist(yaml_data)),
stringsAsFactors = FALSE
)
# Step 2: Remove duplicates
marker_df <- unique(marker_df)
# Step 3: Split the 'path' using str_split_fixed into 5 parts
split_path <- str_split_fixed(
marker_df$path,
"\\.subtypes\\.|\\.marker_genes[0-9]*",
n = 5
)
library(stringr)
library(stringr)
# Step 1: Unlist and convert to data frame
marker_df <- data.frame(
path = names(unlist(yaml_data)),
gene = unname(unlist(yaml_data)),
stringsAsFactors = FALSE
)
# Step 2: Remove duplicates
marker_df <- unique(marker_df)
# Step 3: Split the 'path' using str_split_fixed into 5 parts
split_path <- str_split_fixed(
marker_df$path,
"\\.subtypes\\.|\\.marker_genes[0-9]*",
n = 5
)
# Step 4: Replace empty strings with NA
split_path[split_path == ""] <- NA
# Step 5: Add split columns to the dataframe
colnames(split_path) <- paste0("level", 1:5)
marker_df <- cbind(marker_df, split_path)
# Step 6: Move 'gene' to rownames
rownames(marker_df) <- marker_df$gene
View(marker_df)
# Step 1: Unlist and convert to data frame
marker_df <- data.frame(
path = names(unlist(yaml_data)),
gene = unname(unlist(yaml_data)),
stringsAsFactors = FALSE
)
View(marker_df)
# Flatten the YAML structure
marker_df <- yaml_data %>%
unlist() %>%
as.data.frame(stringsAsFactors = FALSE) %>%
rename(., gene = 1) %>%
distinct() %>%
rownames_to_column("path") #%>%
View(marker_df)
# Flatten the YAML structure
marker_df <- yaml_data %>%
unlist() %>%
as.data.frame(stringsAsFactors = FALSE) %>%
rename(., gene = 1) %>%
distinct() %>%
rownames_to_column("path") %>%
separate(path, into = paste0("level", 1:5), sep = "\\.subtypes\\.|\\.marker_genes[1-2]*",
fill = "right") %>%
mutate(across(everything(), ~ na_if(.x, ""))) %>%
column_to_rownames("gene")
gc()
# Flatten the YAML structure
marker_df <- yaml_data %>%
unlist() %>%
as.data.frame(stringsAsFactors = FALSE) %>%
rename(., gene = 1) %>%
distinct() %>%
rownames_to_column("path") %>%
separate(path, into = paste0("level", 1:5), sep = "\\.subtypes\\.|\\.marker_genes[0-9]*",
fill = "right") %>%
mutate(across(everything(), ~ na_if(.x, ""))) %>%
column_to_rownames("gene")
# Flatten the YAML structure
marker_df <- yaml_data %>%
unlist() %>%
as.data.frame(stringsAsFactors = FALSE) %>%
rename(., gene = 1) %>%
distinct() %>%
rownames_to_column("path") %>%
separate(path, into = paste0("level", 1:5), sep = "\\.subtypes\\.",
fill = "right") %>%
mutate(across(everything(), ~ na_if(.x, ""))) %>%
column_to_rownames("gene")
# Flatten the YAML structure
marker_df <- yaml_data %>%
unlist() %>%
as.data.frame(stringsAsFactors = FALSE) %>%
rename(., gene = 1) %>%
distinct() %>%
rownames_to_column("path") %>%
separate(path, into = paste0("level", 1:5), sep = ".",
fill = "right") %>%
mutate(across(everything(), ~ na_if(.x, ""))) %>%
column_to_rownames("gene")
# Flatten the YAML structure
marker_df <- yaml_data %>%
unlist() %>%
as.data.frame(stringsAsFactors = FALSE) %>%
rename(., gene = 1) %>%
distinct() %>%
rownames_to_column("path") %>%
separate(path, into = paste0("level", 1:5), sep = "subtypes",
fill = "right") %>%
mutate(across(everything(), ~ na_if(.x, ""))) %>%
column_to_rownames("gene")
mem.maxVSize(Inf)
# Flatten the YAML structure
marker_df <- yaml_data %>%
unlist() %>%
as.data.frame(stringsAsFactors = FALSE) %>%
rename(., gene = 1) %>%
distinct() %>%
rownames_to_column("path") %>%
separate(path, into = paste0("level", 1:5), sep = "\\.subtypes\\.|\\.marker_genes[0-9]*",
fill = "right") %>%
mutate(across(everything(), ~ na_if(.x, ""))) %>%
column_to_rownames("gene")
# Flatten the YAML structure
marker_df <- yaml_data %>%
unlist() %>%
as.data.frame(stringsAsFactors = FALSE) %>%
rename(., gene = 1) %>%
distinct() %>%
rownames_to_column("path") %>%
separate(path, into = paste0("level", 1:5), sep = "\\.subtypes\\.|\\.marker_genes[0-9]*",
fill = "right") #%>%
knitr::opts_chunk$set(warning = FALSE, message = FALSE, results = "hide")
library(EnsDb.Hsapiens.v86) # Annotation database
library(biovizBase)
library(Seurat)
library(Signac)
library(Matrix)
library(dplyr)
library(tidyr)
library(ggplot2)
library(presto)
library(pheatmap)
library(yaml)
library(tibble)
library(clustree)
library(clusterProfiler)
library(org.Hs.eg.db)
seurat <- readRDS('out/bimodal_seurat.Rds')
gc()
gc()
gc()
# Find the optimum cluster resolution
seurat <- FindClusters(seurat, resolution = seq(0.1,1,by=0.1), verbose = F, graph.name = 'wsnn')
# Make Plot
clustree(seurat, layout="sugiyama", prefix = "RNA_snn_res.")
mem.maxVSize(Inf)
# Make Plot
clustree(seurat, layout="sugiyama", prefix = "wsnn_res.")
gc()
ls()
knitr::opts_chunk$set(warning = FALSE, message = FALSE, results = "hide")
library(EnsDb.Hsapiens.v86) # Annotation database
library(biovizBase)
library(Seurat)
library(Signac)
library(Matrix)
library(dplyr)
library(tidyr)
library(ggplot2)
library(presto)
library(pheatmap)
library(yaml)
library(tibble)
library(clustree)
library(clusterProfiler)
library(org.Hs.eg.db)
seurat <- readRDS('out/bimodal_seurat.Rds')
DefaultAssay(seurat) <- "RNA"
DE_wnn <- wilcoxauc(seurat, "wsnn_res.0.7", seurat_assay = "RNA")
DefaultAssay(seurat) <- "RNA"
DE_wnn <- wilcoxauc(seurat, "wsnn_res.0.7", seurat_assay = "RNA")
# if you start from separately integrated data
seurat <- readRDS('out/unimodal_seurat.Rds')
